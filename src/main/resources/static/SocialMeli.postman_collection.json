{
	"info": {
		"_postman_id": "8a870f34-9b31-438b-aabf-4f8662bbe5c2",
		"name": "SocialMeli",
		"description": "Requerimientos técnicos funcionales",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40679618",
		"_collection_link": "https://socialmeli-8766.postman.co/workspace/SocialMeli~baa250d9-4d00-4692-8209-e69028b27b1d/collection/40679618-8a870f34-9b31-438b-aabf-4f8662bbe5c2?action=share&source=collection_link&creator=40679618"
	},
	"item": [
		{
			"name": "US 0001",
			"item": [
				{
					"name": "Successful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/1/follow/7",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"follow",
								"7"
							]
						}
					},
					"response": []
				},
				{
					"name": "User not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/100000/follow/1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"100000",
								"follow",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "User not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/1/follow/10000",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"follow",
								"10000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cannot follow self",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/1/follow/1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"follow",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Already Follows",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/3/follow/1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"3",
								"follow",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Followed is not seller",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/1/follow/2",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"follow",
								"2"
							]
						}
					},
					"response": []
				}
			],
			"description": "Poder realizar la acción de \"Follow\" (seguir) a un determinado vendedor."
		},
		{
			"name": "US 0002",
			"item": [
				{
					"name": "Successful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Expected response properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"user_id\");",
									"    pm.expect(jsonData).to.have.property(\"user_name\");",
									"\tpm.expect(jsonData).to.have.property(\"followers_count\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/1/followers/count",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"followers",
								"count"
							]
						}
					},
					"response": []
				},
				{
					"name": "User not seller",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/2/followers/count",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"2",
								"followers",
								"count"
							]
						}
					},
					"response": []
				},
				{
					"name": "User not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/100000/followers/count",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"100000",
								"followers",
								"count"
							]
						}
					},
					"response": []
				}
			],
			"description": "Obtener el resultado de la cantidad de usuarios que siguen a un determinado vendedor."
		},
		{
			"name": "US 0003",
			"item": [
				{
					"name": "Successful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Expected response properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData).to.have.property(\"user_id\");",
									"    pm.expect(jsonData).to.have.property(\"user_name\");",
									"    pm.expect(jsonData).to.have.property(\"followers\");",
									"",
									"    pm.expect(jsonData.followers).to.be.an(\"array\");",
									"",
									"    jsonData.followers.forEach(function(followed) {",
									"        pm.expect(followed).to.have.property(\"user_id\");",
									"        pm.expect(followed).to.have.property(\"user_name\");",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/1/followers/list",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"followers",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "User is not Seller",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/14/followers/list",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"14",
								"followers",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "User not exists",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/100/followers/list",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"100",
								"followers",
								"list"
							]
						}
					},
					"response": []
				}
			],
			"description": "Obtener un listado de todos los usuarios que siguen a un determinado vendedor (¿Quién me sigue?)"
		},
		{
			"name": "US 0004",
			"item": [
				{
					"name": "Successful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Expected response properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData).to.have.property(\"user_id\");",
									"    pm.expect(jsonData).to.have.property(\"user_name\");",
									"    pm.expect(jsonData).to.have.property(\"followed\");",
									"",
									"    pm.expect(jsonData.followed).to.be.an(\"array\");",
									"",
									"    jsonData.followed.forEach(function(followedUser) {",
									"        pm.expect(followedUser).to.have.property(\"user_id\");",
									"        pm.expect(followedUser).to.have.property(\"user_name\");",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/3/followed/list",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"3",
								"followed",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "User not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/1000000/followed/list",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1000000",
								"followed",
								"list"
							]
						}
					},
					"response": []
				}
			],
			"description": "Obtener un listado de todos los vendedores a los cuales sigue un determinado usuario (¿A quién sigo?)"
		},
		{
			"name": "US 0005",
			"item": [
				{
					"name": "Successful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_id\": 1,\n    \"date\": \"2021-04-04\",\n    \"product\": {\n        \"product_id\": 800,\n        \"product_name\": \"Silla Gamer\",\n        \"type\": \"Gamer\",\n        \"brand\": \"Racer\",\n        \"color\": \"Red & Black\",\n        \"notes\": \"Special Edition\"\n    },\n    \"category\": 100,\n    \"price\": 1500.50\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/products/post",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products",
								"post"
							]
						}
					},
					"response": []
				},
				{
					"name": "No body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "localhost:8080/products/post",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products",
								"post"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product id already exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_id\": 1,\n    \"date\": \"2021-04-04\",\n    \"product\": {\n        \"product_id\": 201,\n        \"product_name\": \"Silla Gamer\",\n        \"type\": \"Gamer\",\n        \"brand\": \"Racer\",\n        \"color\": \"Red & Black\",\n        \"notes\": \"Special Edition\"\n    },\n    \"category\": 100,\n    \"price\": 1500.50\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/products/post",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products",
								"post"
							]
						}
					},
					"response": []
				},
				{
					"name": "User not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_id\": 10000,\n    \"date\": \"2021-04-04\",\n    \"product\": {\n        \"product_id\": 213,\n        \"product_name\": \"Silla Gamer\",\n        \"type\": \"Gamer\",\n        \"brand\": \"Racer\",\n        \"color\": \"Red & Black\",\n        \"notes\": \"Special Edition\"\n    },\n    \"category\": 100,\n    \"price\": 1500.50\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/products/post",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products",
								"post"
							]
						}
					},
					"response": []
				}
			],
			"description": "Dar de alta una nueva publicación."
		},
		{
			"name": "US 0006",
			"item": [
				{
					"name": "Successful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Expected response properties\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData).to.have.property(\"user_id\");",
									"    pm.expect(jsonData).to.have.property(\"posts\");",
									"    pm.expect(jsonData.posts).to.be.an(\"array\");",
									"",
									"    jsonData.posts.forEach(function(post) {",
									"        pm.expect(post).to.have.property(\"user_id\");",
									"        pm.expect(post).to.have.property(\"post_id\");",
									"        pm.expect(post).to.have.property(\"date\");",
									"        pm.expect(post).to.have.property(\"product\");",
									"        pm.expect(post).to.have.property(\"category\");",
									"        pm.expect(post).to.have.property(\"price\");",
									"",
									"        pm.expect(post.product).to.be.an(\"object\");",
									"        pm.expect(post.product).to.have.property(\"product_id\");",
									"        pm.expect(post.product).to.have.property(\"product_name\");",
									"        pm.expect(post.product).to.have.property(\"type\");",
									"        pm.expect(post.product).to.have.property(\"brand\");",
									"        pm.expect(post.product).to.have.property(\"color\");",
									"        pm.expect(post.product).to.have.property(\"notes\");",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/products/followed/2/list",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products",
								"followed",
								"2",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "User not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/products/followed/10000/list",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products",
								"followed",
								"10000",
								"list"
							]
						}
					},
					"response": []
				}
			],
			"description": "Obtener un listado de las publicaciones realizadas por los vendedores que un usuario sigue en las últimas dos semanas (para esto tener en cuenta ordenamiento por fecha, publicaciones más recientes primero)."
		},
		{
			"name": "US 0007",
			"item": [
				{
					"name": "Successful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/20/unfollow/19",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"20",
								"unfollow",
								"19"
							]
						}
					},
					"response": []
				},
				{
					"name": "User not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/1/unfollow/100000",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"unfollow",
								"100000"
							]
						}
					},
					"response": []
				},
				{
					"name": "User not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/10000/unfollow/1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"10000",
								"unfollow",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Follow not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/6/unfollow/7",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"6",
								"unfollow",
								"7"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cannot unfollow self",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/1/unfollow/1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"unfollow",
								"1"
							]
						}
					},
					"response": []
				}
			],
			"description": "Poder realizar la acción de \"Unfollow\" (dejar de seguir) a un determinado vendedor"
		},
		{
			"name": "US 0008",
			"item": [
				{
					"name": "Followers order by ASC",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Expected response properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData).to.have.property(\"user_id\");",
									"    pm.expect(jsonData).to.have.property(\"user_name\");",
									"    pm.expect(jsonData).to.have.property(\"followers\");",
									"",
									"    pm.expect(jsonData.followers).to.be.an(\"array\");",
									"",
									"    jsonData.followers.forEach(function(follower) {",
									"        pm.expect(follower).to.have.property(\"user_id\");",
									"        pm.expect(follower).to.have.property(\"user_name\");",
									"    });",
									"});",
									"",
									"pm.test(\"Followers are sorted by user_name in ascending order\", function () {",
									"    var jsonData = pm.response.json();",
									"    var followers = jsonData.followers;    ",
									"    pm.expect(followers).to.be.an(\"array\");    ",
									"    for (let i = 0; i < followers.length - 1; i++) {",
									"        pm.expect(followers[i].user_name <= followers[i + 1].user_name, ",
									"                  `Follower at index ${i} (${followers[i].user_name}) is not less than or equal to follower at index ${i + 1} (${followers[i + 1].user_name})`);",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/9/followers/list?order=name_asc",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"9",
								"followers",
								"list"
							],
							"query": [
								{
									"key": "order",
									"value": "name_asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Followers order by DESC",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Expected response properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData).to.have.property(\"user_id\");",
									"    pm.expect(jsonData).to.have.property(\"user_name\");",
									"    pm.expect(jsonData).to.have.property(\"followers\");",
									"",
									"    pm.expect(jsonData.followers).to.be.an(\"array\");",
									"",
									"    jsonData.followers.forEach(function(follower) {",
									"        pm.expect(follower).to.have.property(\"user_id\");",
									"        pm.expect(follower).to.have.property(\"user_name\");",
									"    });",
									"});",
									"",
									"pm.test(\"Followers are sorted by user_name in descending order\", function () {",
									"    var jsonData = pm.response.json();",
									"    var followers = jsonData.followers;    ",
									"    pm.expect(followers).to.be.an(\"array\");",
									"    for (let i = 0; i < followers.length - 1; i++) {",
									"        pm.expect(followers[i].user_name >= followers[i + 1].user_name,",
									"        `Follower at index ${i} (${followers[i].user_name}) is less than follower at index ${i + 1} (${followers[i + 1].user_name})`);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/9/followers/list?order=name_desc",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"9",
								"followers",
								"list"
							],
							"query": [
								{
									"key": "order",
									"value": "name_desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Followers order by null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/9/followers/list?order=ascendiente",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"9",
								"followers",
								"list"
							],
							"query": [
								{
									"key": "order",
									"value": "ascendiente"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Followers order by error",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/9/followers/list?order=error",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"9",
								"followers",
								"list"
							],
							"query": [
								{
									"key": "order",
									"value": "error"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Followed order by ASC",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Expected response properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData).to.have.property(\"user_id\");",
									"    pm.expect(jsonData).to.have.property(\"user_name\");",
									"    pm.expect(jsonData).to.have.property(\"followed\");",
									"",
									"    pm.expect(jsonData.followed).to.be.an(\"array\");",
									"",
									"    jsonData.followed.forEach(function(followed) {",
									"        pm.expect(followed).to.have.property(\"user_id\");",
									"        pm.expect(followed).to.have.property(\"user_name\");",
									"    });",
									"});",
									"",
									"pm.test(\"Followed are sorted by user_name in ascending order\", function () {",
									"    var jsonData = pm.response.json();",
									"    var followed = jsonData.followed;    ",
									"    pm.expect(followed).to.be.an(\"array\");    ",
									"    for (let i = 0; i < followed.length - 1; i++) {",
									"        pm.expect(followed[i].user_name <= followed[i + 1].user_name, ",
									"                  `Follower at index ${i} (${followed[i].user_name}) is not less than or equal to follower at index ${i + 1} (${followed[i + 1].user_name})`);",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/4/followed/list?order=name_asc",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"4",
								"followed",
								"list"
							],
							"query": [
								{
									"key": "order",
									"value": "name_asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Followed order by DESC",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Expected response properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData).to.have.property(\"user_id\");",
									"    pm.expect(jsonData).to.have.property(\"user_name\");",
									"    pm.expect(jsonData).to.have.property(\"followed\");",
									"",
									"    pm.expect(jsonData.followed).to.be.an(\"array\");",
									"",
									"    jsonData.followed.forEach(function(follower) {",
									"        pm.expect(follower).to.have.property(\"user_id\");",
									"        pm.expect(follower).to.have.property(\"user_name\");",
									"    });",
									"});",
									"",
									"pm.test(\"followed are sorted by user_name in descending order\", function () {",
									"    var jsonData = pm.response.json();",
									"    var followed = jsonData.followed;    ",
									"    pm.expect(followed).to.be.an(\"array\");",
									"    for (let i = 0; i < followed.length - 1; i++) {",
									"        pm.expect(followed[i].user_name >= followed[i + 1].user_name,",
									"        `Follower at index ${i} (${followed[i].user_name}) is less than follower at index ${i + 1} (${followed[i + 1].user_name})`);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/4/followed/list?order=name_desc",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"4",
								"followed",
								"list"
							],
							"query": [
								{
									"key": "order",
									"value": "name_desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Followed order by null",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/4/followed/list?order=",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"4",
								"followed",
								"list"
							],
							"query": [
								{
									"key": "order",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Followed order by error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/4/followed/list?order=error",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"4",
								"followed",
								"list"
							],
							"query": [
								{
									"key": "order",
									"value": "error"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Ordenamiento alfabético ascendente y descendente"
		},
		{
			"name": "US 0009",
			"item": [
				{
					"name": "Post from followed order by ASC",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Expected response properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData).to.have.property(\"user_id\");",
									"    pm.expect(jsonData).to.have.property(\"posts\");",
									"",
									"    pm.expect(jsonData.posts).to.be.an(\"array\");",
									"",
									"    jsonData.posts.forEach(function(post) {",
									"        pm.expect(post).to.have.property(\"user_id\");",
									"        pm.expect(post).to.have.property(\"post_id\");",
									"        pm.expect(post).to.have.property(\"date\");",
									"        pm.expect(post).to.have.property(\"product\");",
									"        pm.expect(post).to.have.property(\"category\");",
									"        pm.expect(post).to.have.property(\"price\");",
									"",
									"        pm.expect(post.product).to.be.an(\"object\");",
									"        pm.expect(post.product).to.have.property(\"product_id\");",
									"        pm.expect(post.product).to.have.property(\"product_name\");",
									"        pm.expect(post.product).to.have.property(\"type\");",
									"        pm.expect(post.product).to.have.property(\"brand\");",
									"        pm.expect(post.product).to.have.property(\"color\");",
									"        pm.expect(post.product).to.have.property(\"notes\");",
									"    });",
									"});",
									"",
									"pm.test(\"Posts are sorted by date_asc in ascending order\", function () {",
									"    var jsonData = pm.response.json();",
									"    var posts = jsonData.posts;    ",
									"    pm.expect(posts).to.be.an(\"array\");    ",
									"    for (let i = 0; i < posts.length - 1; i++) {",
									"        pm.expect(posts[i].date <= posts[i + 1].date, ",
									"                  `Date at index ${i} (${posts[i].date}) is not less than or equal to Date at index ${i + 1} (${posts[i + 1].date})`);",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/products/followed/4/list?order=date_asc",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products",
								"followed",
								"4",
								"list"
							],
							"query": [
								{
									"key": "order",
									"value": "date_asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Post from followed order by DESC",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Expected response properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData).to.have.property(\"user_id\");",
									"    pm.expect(jsonData).to.have.property(\"posts\");",
									"",
									"    pm.expect(jsonData.posts).to.be.an(\"array\");",
									"",
									"    jsonData.posts.forEach(function(post) {",
									"        pm.expect(post).to.have.property(\"user_id\");",
									"        pm.expect(post).to.have.property(\"post_id\");",
									"        pm.expect(post).to.have.property(\"date\");",
									"        pm.expect(post).to.have.property(\"product\");",
									"        pm.expect(post).to.have.property(\"category\");",
									"        pm.expect(post).to.have.property(\"price\");",
									"",
									"        pm.expect(post.product).to.be.an(\"object\");",
									"        pm.expect(post.product).to.have.property(\"product_id\");",
									"        pm.expect(post.product).to.have.property(\"product_name\");",
									"        pm.expect(post.product).to.have.property(\"type\");",
									"        pm.expect(post.product).to.have.property(\"brand\");",
									"        pm.expect(post.product).to.have.property(\"color\");",
									"        pm.expect(post.product).to.have.property(\"notes\");",
									"    });",
									"});",
									"",
									"pm.test(\"Posts are sorted by date_asc in descending order\", function () {",
									"    var jsonData = pm.response.json();",
									"    var posts = jsonData.posts;    ",
									"    pm.expect(posts).to.be.an(\"array\");    ",
									"    for (let i = 0; i < posts.length - 1; i++) {",
									"        pm.expect(posts[i].date >= posts[i + 1].date, ",
									"                  `Date at index ${i} (${posts[i].date}) is not more than or equal to Date at index ${i + 1} (${posts[i + 1].date})`);",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/products/followed/4/list?order=date_desc",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products",
								"followed",
								"4",
								"list"
							],
							"query": [
								{
									"key": "order",
									"value": "date_desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Post from followed order by error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/products/followed/4/list?order=ascendente",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products",
								"followed",
								"4",
								"list"
							],
							"query": [
								{
									"key": "order",
									"value": "ascendente"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Ordenamiento por fecha ascendente y descendente"
		},
		{
			"name": "US 0010",
			"item": [
				{
					"name": "Successful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_id\": 1,\n    \"date\": \"2021-04-04\",\n    \"product\": {\n        \"product_id\": 450,\n        \"product_name\": \"Silla Gamer\",\n        \"type\": \"Gamer\",\n        \"brand\": \"Racer\",\n        \"color\": \"Red & Black\",\n        \"notes\": \"Special Edition\"\n    },\n    \"category\": 100,\n    \"price\": 1500.50,\n    \"has_promo\": true,\n    \"discount\": 80.0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/products/promo-post",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products",
								"promo-post"
							]
						}
					},
					"response": []
				},
				{
					"name": "No body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "localhost:8080/products/promo-post",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products",
								"promo-post"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product id already exists Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_id\": 1,\n    \"date\": \"2021-04-04\",\n    \"product\": {\n        \"product_id\": 201,\n        \"product_name\": \"Silla Gamer\",\n        \"type\": \"Gamer\",\n        \"brand\": \"Racer\",\n        \"color\": \"Red & Black\",\n        \"notes\": \"Special Edition\"\n    },\n    \"category\": 100,\n    \"price\": 1500.50,\n    \"has_promo\": true,\n    \"discount\": 80.0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/products/promo-post",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products",
								"promo-post"
							]
						}
					},
					"response": []
				},
				{
					"name": "User not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_id\": 1000,\n    \"date\": \"2021-04-04\",\n    \"product\": {\n        \"product_id\": 450,\n        \"product_name\": \"Silla Gamer\",\n        \"type\": \"Gamer\",\n        \"brand\": \"Racer\",\n        \"color\": \"Red & Black\",\n        \"notes\": \"Special Edition\"\n    },\n    \"category\": 100,\n    \"price\": 1500.50,\n    \"has_promo\": true,\n    \"discount\": 80.0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/products/post",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products",
								"post"
							]
						}
					},
					"response": []
				}
			],
			"description": "Llevar a cabo la publicación de un nuevo producto en promoción"
		},
		{
			"name": "US 0011",
			"item": [
				{
					"name": "Successful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Expected response properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData).to.have.property(\"user_id\");",
									"    pm.expect(jsonData).to.have.property(\"user_name\");",
									"    pm.expect(jsonData).to.have.property(\"promo_products_count\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/products/promo-post/count?user_id=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products",
								"promo-post",
								"count"
							],
							"query": [
								{
									"key": "user_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User is not a seller",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/products/promo-post/count?user_id=2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products",
								"promo-post",
								"count"
							],
							"query": [
								{
									"key": "user_id",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/products/promo-post/count?user_id=1000",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products",
								"promo-post",
								"count"
							],
							"query": [
								{
									"key": "user_id",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User without promo posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/products/promo-post/count?user_id=3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products",
								"promo-post",
								"count"
							],
							"query": [
								{
									"key": "user_id",
									"value": "3"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Obtener la cantidad de productos en promoción de un determinado vendedor"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}